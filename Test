#!/usr/bin/env bash
set -e -o pipefail

trap 'echo FAILED!; exit 1' 0

fail() { echo 1>&2 'FAILURE:' "$@"; exit 1; }

basedir=$(cd "$(dirname "$0")" && pwd -P)
cd "$basedir"
. activate -q

PYTHONPATH=bin pytest -q "$@" t/*.py

#   Simple form when you expect no messages to stdout
eval $(bin/ckssh.py bash-init)

CKSSH_TEST_SHELL_INTERFACE=''
#   `ckcommand` will separate out the stuff to eval and eval it,
#   leaving stdout and stderr working as normal.
ckcommand test-shell-interface >/dev/null 2>&1
[[ -n $CKSSH_TEST_SHELL_INTERFACE ]] \
    || fail 'CKSSH_TEST_SHELL_INTERFACE not set'

#   Functional testing like this is starting to get painful; we need to
#   find a better way to test this stuff (ideally with unit tests).
#unset SSH_AUTH_SOCK
_compartment=cjs@cynic.net
actual=$(
    HOME="$basedir/t/mock_home"
    XDG_RUNTIME_DIR=/r
    SSH_AUTH_SOCK=/r/ckssh/socket/$_compartment
    ckset)
[[ $actual = $_compartment ]] || fail \
    "ckset: expected $_compartment, actual '$actual'"

trap '' 0
