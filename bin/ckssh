#!/usr/bin/env bash
set -e

err() { echo 1>&2 "$@"; exit 1; }

[ -d "$XDG_RUNTIME_DIR" ] || err '$XDG_RUNTIME_DIR not set.'
ckssh_socket_dir="$XDG_RUNTIME_DIR/ckssh/socket"

# Given a top-level "match-type" directive and its value to match, print
# out all lines of our configuration that match. The rules are basically
# the same as `ssh_config`, with the caveat that there are two different
# types of matching directives, one for hosts and one for compartments.
#
# Note that, even though you pass in the top-level match-type directive
# to match, this still has to know internally all top-level match-type
# directives so it can skip the other types that can never match.
#
print_config() {
    local section=$1
    local name=$2
    local conf_file="$HOME/.ssh/ckssh_config"
    [ -r "$conf_file" ] || return 2

    sed -e '/[^ \t]*#/d' -e '/^[ \t]*$/d' "$conf_file" \
        | (retval=1
           printing=echo
           while read key value; do
                case "$key" in
                    "$section")
                        if [ "$value" = "$name" ]; then
                            retval=0
                            printing=echo
                        else
                           printing=':'
                        fi
                        ;;
                    CK_Compartment|CK_Host)
                        printing=':';;
                    *)
                        $printing "$key $value";;
                esac
           done; return $retval)
}

print_host_config()        { print_config CK_Host        "$@"; }
print_compartment_config() { print_config CK_Compartment "$@"; }

# load_*_config <config_array_name> <name>
#
# Search for the compartment or host matching <name> in the
# configuration file, returning 0 if it's found. If found, the
# configuration lines are appended to the (global) array named
# <config_array_name>.
#
# `load_compartment_config` will return 1 if the compartment is not
# defined in the configuration file. `load_host_config` will return 1
# if a pattern matching the host is not found in the configuration
# file, and will exit with an error message if the host specifies a
# compartment that does not exist.
#
# Note that, at least for the moment, `CK_Compartment` definitions
# must be an exact name, not a wildcard, as the wildcard use case not
# entirely clear.
#
# XXX `CK_Host` configurations should match host patterns, but do not
# do that yet.
#
load_compartment_config() {
    local -n config_array="$1"
    local compartment="$2"

    print_compartment_config "$compartment" >/dev/null || return $?
    while read line; do
        config_array+=("$line")
    done < <(print_compartment_config "$compartment")
}
load_host_config() {
    local config_array_name
    local host
    return 1
}

# This is the pure(-ish) side of ckssh-add, designed to be
# unit-tested.  It should have as much of the logic as possible.
#
# The return value is 0 or the error code of any untested command
# within (because we set the `-e` option for this shell script).
#
# The function has the following (actually impure) results:
#
# * We may exit the process with an error; we do this here because
#   it's too hard in shell to return an error message along with
#   the error indication of the numeric return value. (These parts
#   are tested in fuctional tests.
#
# * The return value is 0 if no untested commands failed internally.
#
# * It changes the `keyfiles` global variable to be the list of files
#   from which keys should be added by the subsequent
#   `execute_ckssh_add` call.
#
ckssh_add() {
    local name="$1"
    shift || err "Usage: $(basename $0) <host or compartment name>"
    local host_compartment="$(
        print_host_config "$name" | while read key value; do
            case "$key" in
                CK_CompartmentName) echo "$value";;
            esac
        done
    )"
    local compartment="${host_compartment:-$name}"
    if print_compartment_config "$compartment" >/dev/null; then
        export SSH_AUTH_SOCK="$ckssh_socket_dir/$compartment"
    elif [ -n "$host_compartment" ]; then
        err "Host \"$name\" references" \
            "nonexistent compartment \"${host_compartment}\"."
    else
        err "No config for host or compartment \"$name\"."
    fi

    if [ -n "$1" ]; then
        given_keyfile_args=true
        for keyfile in "$@"; do keyfiles+=("$keyfile"); done
    else
        given_keyfile_args=false
        coproc print_compartment_config "$compartment"
        while read key value; do case "$key" in
            CK_Keyfile) keyfiles+=("$(echo "$value" | sed -e "s:^~:$HOME:")");;
        esac; done <&"${COPROC[0]}"
    fi
}

# This is the impure side of ckssh-add, which should have minimal logic.
# We currently test it manually, but should build functional tests for it.
#
execute_ckssh_add() {
    mkdir -m 0700 -p "$(dirname "$SSH_AUTH_SOCK")"

    e="$(ssh-add -l >/dev/null 2>&1; echo $?)"
    case $e in
        0) : ;;     # Running with identities
        1) : ;;     # No identities
        2) eval "$(ssh-agent -a "$SSH_AUTH_SOCK" || echo false)" >/dev/null;;
        *) err "Unknown error from ssh-add -l: $e";;
    esac

    if $given_keyfile_args \
       || [ "$(ssh-add -l >/dev/null 2>&1; echo $?)" -eq 1 ]
    then
        for keyfile in "${keyfiles[@]}"; do
            ssh-add -t 8h30m "$keyfile" || exit $?
        done
    fi
}

# Given a command name that produces help output in OpenSSH format,
# return the options that do not take a parameter.
#
get_non_param_opts() {
    local command="$1"; shift || err "INTERNAL ERROR"
    $command 2>&1 | sed -n -e 's,].*,,' -e '1s,.*\[-,,p'
}

# Find the argument indicating  the host in an ssh-style command line.
# The first argument to this function is a string of non-parameter options.
# We assume:
# 1. Any argument starting with a hyphen is an option.
# 2. Any option starting with a non-parameter option is all non-parameter
#    options. (I.e., we incorrectly assume that `-1c` has no parameter
#    though SSH would want the cipher parameter after it.)
#
get_host_arg() {
    local non_param_opts="$1"; shift || err "INTERNAL ERROR"
    local arg
    while [ -n "$1" ]; do case "$1" in
        -*) case "${1:1:1}" in                  # substring($1, 1, 1)
                [$non_param_opts])  ;;
                *)                  shift;;
            esac
            shift
            ;;
        *)  echo "$1"
            break
            ;;
    esac; done
}

unset SSH_AUTH_SOCK
given_keyfile_args=OVERRIDE_THIS
keyfiles=()
case "$(basename "$0")" in
    bats-exec-test)     : ;;                        # Unit test mode hack
    ckssh)              err "Write me!";;
    ckssh-add)          ckssh_add "$@"
                        execute_ckssh_add
                        echo "export SSH_AUTH_SOCK=$SSH_AUTH_SOCK"
                        ;;
    *)                  err "Unknown command";;
esac
